--source include/have_innodb.inc
--source include/master-slave.inc

--vertical_results

let $engine_type= 'innodb';

SET GLOBAL binlog_format = 'ROW';
SET SESSION binlog_format = 'ROW';
select @@global.binlog_format, @@session.binlog_format;

--disable-warnings
DROP TABLE IF EXISTS t1, t2, t3;
DROP PROCEDURE IF EXISTS p1;
DROP PROCEDURE IF EXISTS p2;
DROP PROCEDURE IF EXISTS p3;
--enable-warnings

eval CREATE TABLE t1(id MEDIUMINT NOT NULL AUTO_INCREMENT,
                           dt TIMESTAMP, user CHAR(255), uuidf LONGBLOB,
                           fkid MEDIUMINT, filler VARCHAR(255),
                           PRIMARY KEY(id)) ENGINE=$engine_type;

eval CREATE TABLE t2(id MEDIUMINT NOT NULL AUTO_INCREMENT,
                           dt TIMESTAMP, user CHAR(255), uuidf LONGBLOB,
                           fkid MEDIUMINT, filler VARCHAR(255),
                           PRIMARY KEY(id)) ENGINE=$engine_type
				PARTITION BY KEY(id) partitions 5;

eval CREATE TABLE t3(id MEDIUMINT NOT NULL AUTO_INCREMENT,
                           dt TIMESTAMP, user CHAR(255), uuidf LONGBLOB,
                           fkid MEDIUMINT, filler VARCHAR(255),
                           PRIMARY KEY(id)) ENGINE=$engine_type 
				PARTITION BY RANGE(id) 
                                SUBPARTITION BY hash(id) subpartitions 2
				(PARTITION pa1 values less than (10),
				 PARTITION pa2 values less than (20),
				 PARTITION pa3 values less than (30),
				 PARTITION pa4 values less than (40),
				 PARTITION pa5 values less than (50),
				 PARTITION pa6 values less than (60),
				 PARTITION pa7 values less than (70),
				 PARTITION pa8 values less than (80),
				 PARTITION pa9 values less than (90),
				 PARTITION pa10 values less than (100),
				 PARTITION pa11 values less than MAXVALUE);

######## Create SPs, Functions, Views and Triggers Section ##############

delimiter |;
CREATE PROCEDURE p1()
BEGIN
   DECLARE ins_count INT DEFAULT 1000; 
   DECLARE del_count INT;
   DECLARE cur_user VARCHAR(255);
   DECLARE local_uuid VARCHAR(255);
   DECLARE local_time TIMESTAMP;

   SET local_time= NOW();
   SET cur_user= CURRENT_USER();
   SET local_uuid= UUID();
 
   WHILE ins_count > 0 DO
     INSERT INTO t1 VALUES (NULL, NOW(), USER() , UUID(),
                                   ins_count,'Going to test MBR for MySQL');
     SET ins_count = ins_count - 1;
   END WHILE;
   
   SELECT MAX(id) FROM t1 INTO del_count;
   WHILE del_count > 0 DO
     DELETE FROM t1 WHERE id = del_count;
     SET del_count = del_count - 2;
   END WHILE;
END|   

CREATE PROCEDURE p2()
BEGIN
   DECLARE ins_count INT DEFAULT 1000; 
   DECLARE del_count INT;
   DECLARE cur_user VARCHAR(255);
   DECLARE local_uuid VARCHAR(255);
   DECLARE local_time TIMESTAMP;

   SET local_time= NOW();
   SET cur_user= CURRENT_USER();
   SET local_uuid= UUID();
 
   WHILE ins_count > 0 DO
     INSERT INTO t2 VALUES (NULL, NOW(), USER() , UUID(),
                                   ins_count,'Going to test MBR for MySQL');
     SET ins_count = ins_count - 1;
   END WHILE;
   
   SELECT MAX(id) FROM t2 INTO del_count;
   WHILE del_count > 0 DO
     DELETE FROM t2 WHERE id = del_count;
     SET del_count = del_count - 2;
   END WHILE;
END|   

CREATE PROCEDURE p3()
BEGIN
   DECLARE ins_count INT DEFAULT 1000; 
   DECLARE del_count INT;
   DECLARE cur_user VARCHAR(255);
   DECLARE local_uuid VARCHAR(255);
   DECLARE local_time TIMESTAMP;

   SET local_time= NOW();
   SET cur_user = CURRENT_USER();
   SET local_uuid=UUID();

   WHILE ins_count > 0 DO
     INSERT INTO t3 VALUES (NULL, NOW(), USER(), UUID(),
                                    ins_count,'Going to test MBR for MySQL');
     SET ins_count = ins_count - 1;
   END WHILE;

   SELECT MAX(id) FROM t3 INTO del_count;
   WHILE del_count > 0 DO
     DELETE FROM t3 WHERE id = del_count;
   SET del_count = del_count - 2;
   END WHILE;
END|

delimiter ;|

############ Finish Setup Section ###################


############ Test Section ###################

CALL p1();
SELECT count(*) as "Master regular" FROM t1;
CALL p2();
SELECT count(*) as "Master bykey" FROM t2;
CALL p3();
SELECT count(*) as "Master byrange" FROM t3;

#--source include/master-slave-end.inc
--sync_slave_with_master
connection slave;
show create table t3; 
show slave status;
SELECT count(*) "Slave norm" FROM t1;
SELECT count(*) "Slave bykey" FROM t2;
SELECT count(*) "Slave byrange" FROM t3;

connection master;
DROP TABLE t1, t2, t3;
DROP PROCEDURE IF EXISTS p1;
DROP PROCEDURE IF EXISTS p2;
DROP PROCEDURE IF EXISTS p3;
save_master_pos;
connection slave;
sync_with_master;

# End of 5.1 tests
