MYSQL_STORAGE_ENGINE(falcon, falcon, [Falcon Storage Engine],
        [Transactional tables using Falcon], [max,max-no-ndb])
MYSQL_PLUGIN_DIRECTORY(falcon, [storage/falcon])
MYSQL_PLUGIN_STATIC(falcon,   [libfalcon.a])
MYSQL_PLUGIN_DYNAMIC(falcon,  [ha_falcon.la])
# Generate Makefile for TransformLib
MYSQL_PLUGIN_ACTIONS(falcon,[
  AC_CONFIG_FILES(storage/falcon/TransformLib/Makefile)

  AC_CACHE_CHECK([compiler flag to silence offsetof warnings],
                 falcon_cxx_no_invalid_offsetof,[
    AC_LANG_PUSH([C++])
    ac_save_CXXFLAGS="$CXXFLAGS"
    CXXFLAGS="$CXXFLAGS -Wno-invalid-offsetof"
    AC_TRY_COMPILE([],
      [int i = 0;
       i++;], 
      falcon_cxx_no_invalid_offsetof="-Wno-invalid-offsetof", 
      falcon_cxx_no_invalid_offsetof=""
    )
    CXXFLAGS=$ac_save_CXXFLAGS
    AC_LANG_POP([C++])
  ])

  AC_CACHE_CHECK([if Falcon Storage Engine is supported on $MACHINE_TYPE],
  			     falcon_supported_by_machine,[
    case "$BASE_MACHINE_TYPE" in
      i386)   falcon_supported_by_machine="yes" ;;
      x86_64) falcon_supported_by_machine="yes" ;;
	  *) falcon_supported_by_machine="no" ;;
    esac
  ])
  
  # Falcon uses exceptions and STL
  FALCON_CXXFLAGS="$falcon_cxx_no_invalid_offsetof -fexceptions"
  case "$with_debug" in
	yes)  FALCON_CXXFLAGS="$FALCON_CXXFLAGS -D_DEBUG -DMEM_DEBUG" ;;
	full) FALCON_CXXFLAGS="$FALCON_CXXFLAGS -D_DEBUG -DMEM_DEBUG" ;;
  esac

  if test "$falcon_supported_by_machine" = "yes"; then
    CXXLDFLAGS="$CXXLDFLAGS -lstdc++"
  else
    plugin_falcon_static_target=""
	plugin_falcon_shared_target=""
	mysql_plugin_falcon="no"	
	with_plugin_falcon="no"	
  fi

  AC_SUBST([FALCON_CXXFLAGS])
])
